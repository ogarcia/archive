#!/bin/bash
### BEGIN INIT INFO
# Provides:          firewall
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Load, unload or show firewall rules
### END INIT INFO

# =============================================
# Coffee: Connectical Firewalls for Enterprises
# =============================================
#
# Author:    √ìscar Garc√≠a Amor <ogarcia@connectical.net>
# Version:   A0
# Web:       http://code.connectical.net/coffee
# Copyright: ¬©2011 Connectical Labs. Distributed under terms of the MIT license.
#
# --------
# Jamaican
# --------
#
# This version of Coffe is designed as standalone firewall script for use
# with any Linux distribution. This is a "hard" implementation of black
# version of coffee (deprecated) as more restrictive firewall.
#

# -----------
# Definitions
# -----------
#
# Here are all script variables, you can chage it in accordance of your
# machine.
#

# $ipt
# 	iptables binary

ipt="/sbin/iptables"

# $ipt6
# 	iptables binary for ipv6

ipt6="/sbin/ip6tables"

# $mpr
# 	modprobe binary

mpr="/sbin/modprobe"

# $load_modules
# 	true if you need module loading, if you have iptables support into
# 	kernel then false

load_modules=true

# $int
# 	interface name

int="eth0"

# $secure_networks
# 	secure networks array, if you don't have secure netwoks you can comment
# 	this var

#secure_networks=( "192.168.0.0/24" "192.168.1.0/24" )

# $secure_ipv6_networks
# 	secure ipv6 networks array

#secure_ipv6_networks=( "fe80::/10" "ff00::/8" )

# $banned_networks
# 	banned networks array, if you don't have enemies you can comment this
# 	var

#banned_networks=( "212.51.33.0/24" "213.60.0.0/22")

# $banned_ipv6_networks
# 	banned ipv6 networks array

#banned_ipv6_networks=( "2001:470:dcd9:1::1/64" "2001:470:dcd8:1::1/64" )

# $banned_networks_log_prefix
# 	log prefix for connection attempt from a banned network
# 	Note: We recommend leave a whitespace at end of string

banned_networks_log_prefix="Banned network intrusion: "

# $secure_ips
# 	secure ip's array, if you dont have secure ip's you can comment this
# 	var

#secure_ips=( "10.20.30.40" "69.69.69.69" )

# $secure_ipv6_ips
# 	secure ipv6 ip's array

#secure_ipv6_ips=( "fe80::1" "fe80::2" )

# $banned_ips
# 	banned ip's array, if your boss is perfectly capable for work with
# 	computers you can comment this var

#banned_ips=( "212.51.33.73" "212.51.33.106" "192.168.1.10" )

# $banned_ipv6_ips
# 	banned ipv6 ip's array

#banned_ipv6_ips=( "2001:470:dcd9:1::4" "2001:470:dcd9:1::8" )

# $banned_ips_log_prefix
#   log prefix for connection attempt from a banned ip
#   Note: We recommend leave a whitespace at end of string

banned_ips_log_prefix="Banned IP intrusion: "

# $ssh
# 	ssh port definition, the ssh have a special processing, if you leave the
# 	var in blank the port will not be processed
# 	Notes: This var works in conjunction with $ssh_tries and $ssh_time, you
# 	can open ssh port and not define here, in this case the port doesn't
# 	have any special treatment. If you define here the ssh port and doesn't
# 	open it (and you not have any secure network or ip), it doesn't work.
# 	Warning: This var does't open ssh port, only defines it for a special
# 	process.

ssh="22"

# $ssh_tries
# 	if you define ssh port, you can define here the number of connections
# 	that you permit form any ip before that the port closes for this ip for
# 	time defined by $ssh_time
# 	Note: The tries excess are logged as $ssh_log_prefix

ssh_tries="3"

# $ssh_time
# 	if you define ssh port, you can define here the time (in seconds) that
# 	ssh port are closed for any ip that excess the number of connections
# 	defined by $ssh_tries

ssh_time="60"

# $ssh_log_prefix
#   log prefix for connection attempt that excess $ssh_tries
#   Note: We recommend leave a whitespace at end of string

ssh_log_prefix="SSH bruteforce attempt: "

# $tcp_ports
# 	open tcp ports array, you can declare what ports you want open to a ip,
# 	network or entire internet. if you can open ssh port you must define
# 	here too. if you don't have open ports you can comment this var

# Examples:
# "22" -> Open 22 port to entire internet
# "22 192.168.0.1" -> Open 22 port to single IP
# "25 192.168.0.0/24" -> Open 25 port to local network 192.168.0.0-255
# "25 192.168.0.0/255.255.255.0" -> Same as above but in long subnet mask

tcp_ports=(
"22"
"22 192.168.0.0/24"
"22 192.168.1.10"   # you can use the same port to open to other ip or net
"80"
"443"
)

# $udp_ports
# 	open udp ports array, same as tcp ports but udp

udp_ports=(
"53 192.168.0.0/24"
"123"
)

# $tcp6_ports
# 	open ipv6 tcp ports array, same as tcp ports but in ipv6

# Examples:
# "22" -> Open 22 port to entire internet via IPv6
# "25 fc00::1" -> Open 25 port to single ip
# "80 fc00::/7" -> Open 80 port to local network fc00::/7

tcp6_ports=(
"22 fc00::/7"
"25"
"80"
"443"
)

# $udp6_ports
# 	open ipv6 udp ports array, same as udp ports but in ipv6

udp6_ports=(
"53 fc00::/7"
"123"
)

# $icmp
# 	incoming icmp accepted types, you can use numeric type or named type, if
# 	you can permit any incoming icmp you can use special word "any"
# 	Note: only implemented for ipv4, ipv6 need icmp packets to work

icmp=( "echo-request" "timestamp-request" )

# $icmp_close
#   this var works in conjunction with $icmp_average_limit, $icmp_time and
#   $icmp_requests for close icmp responses to any that excess the number of
#   requests, defined by $icmp_requests, a number of times, defined by
#   $icmp_average_limit, in a time period, defined by $icmp_time
#   if defined as true (default) then it's work
#   Warning: You must define icmp accepted types for it's work

icmp_close=true

# $icmp_average_limit
#   maximun number of matches per time period

icmp_average_limit="1"

# $icmp_requests
#   number of requests to constitute one match for $icmp_average_limit

icmp_requests="10"

# $icmp_time
#   time period, the accepted values are: second/minute/hour/day

icmp_time="minute"

# color definitions
# 	we loves color, the life is color (comment if you live in a black and
# 	white world)

red="[1;31m"
green="[1;32m"
bold="[1m"
restore="[0m"

# --------------------
# Functions Definition
# --------------------

# Function: ebegin
# Purpose:  prints the input with color
# Input:    a string
# Output:   a color string
# Return:   always *true*

ebegin ()
{
	echo -ne "   ${green}*${restore} $@ . . ."
}

# Function: eend
# Purpose:  print Ok or Fail depends the input
# Input:    cero or one number greater than cero
# Output:   prints Ok if input is cero, Fail if input is greater than cero
# Return:   always *true*

eend ()
{
	if [ $1 -eq 0 ]; then
		echo -e "	[ ${green}Ok${restore} ] "
	else
		echo -e "	[ ${red}Fail${restore} ] "
	fi
}


# Function: start
# Purpose:  set iptables firewall rules
# Input:    **None**
# Output:   Prints in ``stdout`` the status of firewall load
# Return:   *true*, unless any error occurs

start ()
{

	# Start the dance

	echo -e " ${bold}*${restore} Starting firewall . . . "

	# Test if is neccesary module load

	if $load_modules; then

		# Module loading

		echo -e "   ${green}*${restore} Loading kernel modules . . . "
		$mpr -q -s x_tables && echo            "     x_tables"
		$mpr -q -s ip_tables && echo           "     ip_tables"
		$mpr -q -s iptable_filter && echo      "     iptable_filter"
		$mpr -q -s nf_conntrack && echo        "     nf_conntrack"
		$mpr -q -s xt_state && echo            "     xt_state"
		$mpr -q -s nf_defrag_ipv4 && echo      "     nf_defrag_ipv4"
		$mpr -q -s nf_conntrack_ipv4 && echo   "     nf_conntrack_ipv4"

		# Load module for manage ports if open ports are declared

		if [ -n "$tcp_ports" ] || [ -n "$udp_ports" ] || [ -n "$ssh" ]; then
			$mpr -q -s xt_tcpudp && echo         "     xt_tcpudp"
		fi

		# Load module for ssh have special processing

		if [ -n "$ssh" ]; then
			$mpr -q -s ipt_recent && echo        "     ipt_recent"
		fi

		# Load module for close ICMP responses

		$icmp_close && \
			$mpr -q -s xt_limit && echo          "     xt_limit"

		# Load module for log

		if [ -n "$banned_networks" ] || \
		   [ -n "$banned_ips" ] || \
		   [ -n "$ssh" ]; then
			$mpr -q -s ipt_LOG && echo           "     ipt_LOG"
		fi

		# Module loading for ipv6 support

		$mpr -q -s ip6_tables && echo        "     ip6_tables"
		$mpr -q -s ip6table_filter && echo   "     ip6table_filter"
		$mpr -q -s nf_defrag_ipv6 && echo    "     nf_defrag_ipv6"
		$mpr -q -s nf_conntrack_ipv6 && echo "     nf_conntrack_ipv6"

		# Load module for log IPv6

		if [ ! -z "$banned_ipv6_networks" ] || \
		   [ ! -z "$banned_ipv6_ips" ] || \
		   [ ! -z "$ssh" ]; then
			$mpr -q -s ip6t_LOG && echo        "     ip6t_LOG"
		fi

	fi

	# Set the rules

	ebegin "Removing old IPv4 firewall rules"
	$ipt -Z &> /dev/null && \
	$ipt -F &> /dev/null && \
	$ipt -X &> /dev/null
	eend $?

	ebegin "Removing old IPv6 firewall rules"
	$ipt6 -Z &> /dev/null && \
	$ipt6 -F &> /dev/null && \
	$ipt6 -X &> /dev/null
	eend $?

	# Default firewall rules, drop all input, permit all from loopback and
	# permit output

	ebegin "Setting IPv4 default firewall rules"
	$ipt -P INPUT DROP &> /dev/null && \
	$ipt -P OUTPUT ACCEPT &> /dev/null && \
	$ipt -A INPUT -i lo -j ACCEPT &> /dev/null
	eend $?

	ebegin "Setting IPv6 default firewall rules"
	$ipt6 -P INPUT DROP &> /dev/null && \
	$ipt6 -P OUTPUT ACCEPT &> /dev/null && \
	$ipt6 -A INPUT -i lo -j ACCEPT &> /dev/null
	eend $?

	# Make our own chains

	ebegin "Creating own IPv4 chains"
	[ -n "$secure_networks" ] && { $ipt -N secure-networks &> /dev/null || ok=false; }
	[ -n "$banned_networks" ] && { $ipt -N banned-networks &> /dev/null || ok=false; }
	[ -n "$secure_ips" ] && { $ipt -N secure-ips &> /dev/null || ok=false; }
	[ -n "$banned_ips" ] && { $ipt -N banned-ips &> /dev/null || ok=false; }
	[ -n "$ssh" ] && { $ipt -N ssh-rules &> /dev/null || ok=false; }
	[ -n "$tcp_ports" ] && { $ipt -N open-tcp-ports &> /dev/null || ok=false; }
	[ -n "$udp_ports" ] && { $ipt -N open-udp-ports &> /dev/null || ok=false; }
	[ -n "$icmp" ] && { $ipt -N incoming-icmp &> /dev/null || ok=false; }
	$ok
	eend $? && unset $ok

	ebegin "Creating own IPv6 chains"
	[ -n "$secure_ipv6_networks" ] && { $ipt6 -N secure-ipv6-networks &> /dev/null || ok=false; }
	[ -n "$banned_ipv6_networks" ] && { $ipt6 -N banned-ipv6-networks &> /dev/null || ok=false; }
	[ -n "$secure_ipv6_ips" ] && { $ipt6 -N secure-ipv6-ips &> /dev/null || ok=false; }
	[ -n "$banned_ipv6_ips" ] && { $ipt6 -N banned-ipv6-ips &> /dev/null || ok=false; }
	[ -n "$ssh" ] && { $ipt6 -N ssh-ipv6-rules &> /dev/null || ok=false; }
	[ -n "$tcp6_ports" ] && { $ipt6 -N open-tcp6-ports &> /dev/null || ok=false; }
	[ -n "$udp6_ports" ] && { $ipt6 -N open-udp6-ports &> /dev/null || ok=false; }
	$ok
	eend $? && unset $ok

	# Open input for secure networks
	# If there are networks defined then accept incoming connections from it

	if [ -n "$secure_networks" ]; then
		echo -e "   ${green}*${restore} Opening input for secure IPv6 networks . . . "
		for network in "${secure_networks[@]}"
		do
			echo -ne "     Network: ${network} . . . "
			$ipt -A secure-networks -i $int -s $network -j ACCEPT &> /dev/null
			eend $?
		done
	fi

	if [ -n "$secure_ipv6_networks" ]; then
		echo -e "   ${green}*${restore} Opening input for secure IPv6 networks . . . "
		for network in "${secure_ipv6_networks[@]}"
		do
			echo -ne "     Network: ${network} . . . "
			$ipt6 -A secure-ipv6-networks -i $int -s $network -j ACCEPT &> /dev/null
			eend $?
		done
	fi

	# Close input for banned networks
	# If there are networks defined then close all incoming connections from it

	if [ -n "$banned_networks" ]; then
		if [ -z "${banned_networks_log_prefix}" ]; then
			echo -e "   ${red}*${restore} WARNING: The var \$banned_networks_log_prefix is not defined, using default definition"
			banned_networks_log_prefix="Banned network intrusion: "
		fi
		echo -e "   ${green}*${restore} Dropping input for banned IPv4 networks . . . "
		for network in "${banned_networks[@]}"
		do
			echo -ne "     Network: ${network} . . . "
			$ipt -A banned-networks -i $int -s $network -j LOG \
			--log-prefix "${banned_networks_log_prefix}" &> /dev/null && \
			$ipt -A banned-networks -i $int -s $network -j DROP &> /dev/null
			eend $?
		done
	fi

	if [ -n "$banned_ipv6_networks" ]; then
		if [ -z "${banned_networks_log_prefix}" ]; then
			echo -e "   ${red}*${restore} WARNING: The var \$banned_networks_log_prefix is not defined, using default definition"
			banned_networks_log_prefix="Banned network intrusion: "
		fi
		echo -e "   ${green}*${restore} Dropping input for banned IPv6 networks . . . "
		for network in "${banned_ipv6_networks[@]}"
		do
			echo -ne "     Network: ${network} . . . "
			$ipt6 -A banned-ipv6-networks -i $int -s $network -j LOG \
			--log-prefix "${banned_networks_log_prefix}" &> /dev/null && \
			$ipt6 -A banned-ipv6-networks -i $int -s $network -j DROP &> /dev/null
			eend $?
		done
	fi

	# Open input for secure ip's
	# If there are secure ip's defined then accept incoming connections from
	# it

	if [ -n "$secure_ips" ]; then
		echo -e "   ${green}*${restore} Opening input for secure IPv4 ip's . . . "
		for ip in "${secure_ips[@]}"
		do
			echo -ne "     IP: ${ip} . . . "
			$ipt -A secure-ips -i $int -s $ip -j ACCEPT &> /dev/null
			eend $?
		done
	fi

	if [ -n "$secure_ipv6_ips" ]; then
		echo -e "   ${green}*${restore} Opening input for secure IPv6 ip's . . . "
		for ip in "${secure_ipv6_ips[@]}"
		do
			echo -ne "     IP: ${ip} . . . "
			$ipt6 -A secure-ipv6-ips -i $int -s $ip -j ACCEPT &> /dev/null
			eend $?
		done
	fi

	# Close input for banned ips
	# If there are ips defined then close all incoming connections from it

	if [ -n "$banned_ips" ]; then
		if [ -z "${banned_ips_log_prefix}" ]; then
			echo -e "   ${red}*${restore} WARNING: The var \$banned_ips_log_prefix is not defined, using default definition"
			banned_ips_log_prefix="Banned IP intrusion: "
		fi
		echo -e "   ${green}*${restore} Dropping input for banned IPv4 ip's . . . "
		for ip in "${banned_ips[@]}"
		do
			echo -ne "     IP: ${ip} . . . "
			$ipt -A banned-ips -i $int -s $ip -j LOG \
			--log-prefix "${banned_ips_log_prefix}" &> /dev/null && \
			$ipt -A banned-ips -i $int -s $ip -j DROP &> /dev/null
			eend $?
		done
	fi

	if [ -n "$banned_ipv6_ips" ]; then
		if [ -z "${banned_ips_log_prefix}" ]; then
			echo -e "   ${red}*${restore} WARNING: The var \$banned_ips_log_prefix is not defined, using default definition"
			banned_ips_log_prefix="Banned IP intrusion: "
		fi
		echo -e "   ${green}*${restore} Dropping input for banned IPv6 ip's . . . "
		for ip in "${banned_ipv6_ips[@]}"
		do
			echo -ne "     IP: ${ip} . . . "
			$ipt6 -A banned-ipv6-ips -i $int -s $ip -j LOG \
			--log-prefix "${banned_ips_log_prefix}" &> /dev/null && \
			$ipt6 -A banned-ipv6-ips -i $int -s $ip -j DROP &> /dev/null
			eend $?
		done
	fi

	# Setting special treatment to ssh if defined

	if [ ! -z $ssh ]; then
		if [ -z "${ssh_log_prefix}" ]; then
			echo -e "   ${red}*${restore} WARNING: The var \$ssh_log_prefix is not defined, using default definition"
			ssh_log_prefix="SSH bruteforce attempt: "
		fi
		ebegin "Setting special rules for ssh over IPv4"
		$ipt -A ssh-rules -p tcp --dport $ssh -i $int -m state --state NEW -m \
		recent --name SSH --update --seconds $ssh_time --hitcount $ssh_tries -j LOG \
		--log-prefix "${ssh_log_prefix}" &> /dev/null && \
		$ipt -A ssh-rules -p tcp --dport $ssh -i $int -m state --state NEW -m \
		recent --name SSH --update --seconds $ssh_time --hitcount $ssh_tries -j DROP \
		&> /dev/null && \
		$ipt -A ssh-rules -p tcp --dport $ssh -i $int -m state --state NEW -m \
		recent --name SSH --set &> /dev/null
		eend $?
		ebegin "Setting special rules for ssh over IPv6"
		$ipt6 -A ssh-ipv6-rules -p tcp --dport $ssh -i $int -m state --state NEW -m \
		recent --name SSH --update --seconds $ssh_time --hitcount $ssh_tries -j LOG \
		--log-prefix "${ssh_log_prefix}" &> /dev/null && \
		$ipt6 -A ssh-ipv6-rules -p tcp --dport $ssh -i $int -m state --state NEW -m \
		recent --name SSH --update --seconds $ssh_time --hitcount $ssh_tries -j DROP \
		&> /dev/null && \
		$ipt6 -A ssh-ipv6-rules -p tcp --dport $ssh -i $int -m state --state NEW -m \
		recent --name SSH --set &> /dev/null
		eend $?
	fi

	# Opening input ports
	# If there are input ports defined then open it

	# TCP Ports

	if [ ! -z "$tcp_ports" ]; then
		echo  -e "   ${green}*${restore} Opening input IPv4 TCP ports . . . "
		for tcp_port_declaration in "${tcp_ports[@]}"
		do
			tcp_port_array=($tcp_port_declaration)
			if [ -z ${tcp_port_array[1]} ]; then
				echo -ne "     TCP Port ${tcp_port_array[0]} to all Internet . . . "
				$ipt -A open-tcp-ports -p tcp --dport ${tcp_port_array[0]} -i \
				$int -j ACCEPT &> /dev/null
				eend $?
			else
				echo -ne "     TCP Port ${tcp_port_array[0]} to ${tcp_port_array[1]} . . . "
				$ipt -A open-tcp-ports -p tcp --dport ${tcp_port_array[0]} -s \
				${tcp_port_array[1]} -i $int -j ACCEPT &> /dev/null
				eend $?
			fi
		done
	fi

	if [ ! -z "$tcp6_ports" ]; then
		echo  -e "   ${green}*${restore} Opening input IPv6 TCP ports . . . "
		for tcp6_port_declaration in "${tcp6_ports[@]}"
		do
			tcp6_port_array=($tcp6_port_declaration)
			if [ -z ${tcp6_port_array[1]} ]; then
				echo -ne "     TCP Port ${tcp6_port_array[0]} to all Internet . . . "
				$ipt6 -A open-tcp6-ports -p tcp --dport ${tcp6_port_array[0]} -i \
				$int -j ACCEPT &> /dev/null
				eend $?
			else
				echo -ne "     TCP Port ${tcp6_port_array[0]} to ${tcp6_port_array[1]} . . . "
				$ipt6 -A open-tcp6-ports -p tcp --dport ${tcp6_port_array[0]} -s \
				${tcp6_port_array[1]} -i $int -j ACCEPT &> /dev/null
				eend $?
			fi
		done
	fi

	# UDP Ports

	if [ ! -z "$udp_ports" ]; then
		echo  -e "   ${green}*${restore} Opening input IPv4 UDP ports . . . "
		for udp_port_declaration in "${udp_ports[@]}"
		do
			udp_port_array=($udp_port_declaration)
			if [ -z ${udp_port_array[1]} ]; then
				echo -ne "     UDP Port ${udp_port_array[0]} to all Internet . . . "
				$ipt -A open-udp-ports -p udp --dport ${udp_port_array[0]} -i \
				$int -j ACCEPT &> /dev/null
				eend $?
			else
				echo -ne "     TCP Port ${udp_port_array[0]} to ${udp_port_array[1]} . . . "
				$ipt -A open-udp-ports -p udp --dport ${udp_port_array[0]} -s \
				${udp_port_array[1]} -i $int -j ACCEPT &> /dev/null
				eend $?
			fi
		done
	fi

	if [ ! -z "$udp6_ports" ]; then
		echo  -e "   ${green}*${restore} Opening input IPv6 UDP ports . . . "
		for udp6_port_declaration in "${udp6_ports[@]}"
		do
			udp6_port_array=($udp6_port_declaration)
			if [ -z ${udp6_port_array[1]} ]; then
				echo -ne "     UDP Port ${udp6_port_array[0]} to all Internet . . . "
				$ipt6 -A open-udp6-ports -p udp --dport ${udp6_port_array[0]} -i \
				$int -j ACCEPT &> /dev/null
				eend $?
			else
				echo -ne "     TCP Port ${udp6_port_array[0]} to ${udp6_port_array[1]} . . . "
				$ipt6 -A open-udp6-ports -p udp --dport ${udp6_port_array[0]} -s \
				${udp6_port_array[1]} -i $int -j ACCEPT &> /dev/null
				eend $?
			fi
		done
	fi

	# Setting accepted incoming icmp types

	if [ ! -z $icmp ]; then
		echo  -e "   ${green}*${restore} Setting IPv4 ICMP rules . . . "
		if $icmp_close; then
			echo -ne "     Setting values for close ICMP responses: ${icmp_requests} request(s) ${icmp_average_limit} time(s) per ${icmp_time} . . . "
			icmp_limit_command="-m limit --limit $icmp_average_limit/$icmp_time --limit-burst $icmp_requests"
			eend $?
		fi
		for icmp_type in ${icmp[@]}
		do
			echo -ne "     ICMP: ${icmp_type} . . . "
			$ipt -A incoming-icmp -p icmp --icmp-type $icmp_type -i $int $icmp_limit_command -j ACCEPT &> /dev/null
			eend $?
		done
	fi

	# Permit responses for output connections

	ebegin "Setting rules for established IPv4 connections"
	$ipt -A INPUT -i $int -m state --state ESTABLISHED,RELATED -j ACCEPT \
	&> /dev/null
	eend $?

	ebegin "Setting rules for established IPv6 connections"
	$ipt6 -A INPUT -p ipv6-icmp -j ACCEPT && \
	$ipt6 -A INPUT -i $int -m state --state ESTABLISHED,RELATED -j ACCEPT \
	&> /dev/null
	eend $?

	# Applying own rules to input


	ebegin "Applying own IPv4 rules"
	[ -n "$secure_networks" ] && { $ipt -A INPUT -j secure-networks &> /dev/null || ok=false; }
	[ -n "$banned_networks" ] && { $ipt -A INPUT -j banned-networks &> /dev/null || ok=false; }
	[ -n "$secure_ips" ] && { $ipt -A INPUT -j secure-ips &> /dev/null || ok=false; }
	[ -n "$banned_ips" ] && { $ipt -A INPUT -j banned-ips &> /dev/null || ok=false; }
	[ -n "$ssh" ] && { $ipt -A INPUT -j ssh-rules &> /dev/null || ok=false; }
	[ -n "$tcp_ports" ] && { $ipt -A INPUT -j open-tcp-ports &> /dev/null || ok=false; }
	[ -n "$udp_ports" ] && { $ipt -A INPUT -j open-udp-ports &> /dev/null || ok=false; }
	[ -n "$icmp" ] && { $ipt -A INPUT -j incoming-icmp &> /dev/null || ok=false; }
	$ok
	eend $? && unset $ok

	ebegin "Applying own IPv6 rules"
	[ -n "$secure_ipv6_networks" ] && { $ipt6 -A INPUT -j secure-ipv6-networks &> /dev/null || ok=false; }
	[ -n "$banned_ipv6_networks" ] && { $ipt6 -A INPUT -j banned-ipv6-networks &> /dev/null || ok=false; }
	[ -n "$secure_ipv6_ips" ] && { $ipt6 -A INPUT -j secure-ipv6-ips &> /dev/null || ok=false; }
	[ -n "$banned_ipv6_ips" ] && { $ipt6 -A INPUT -j banned-ipv6-ips &> /dev/null || ok=false; }
	[ -n "$ssh" ] && { $ipt6 -A INPUT -j ssh-ipv6-rules &> /dev/null || ok=false; }
	[ -n "$tcp6_ports" ] && { $ipt6 -A INPUT -j open-tcp6-ports &> /dev/null || ok=false; }
	[ -n "$udp6_ports" ] && { $ipt6 -A INPUT -j open-udp6-ports &> /dev/null || ok=false; }
	$ok
	eend $? && unset $ok

	echo -e " ${bold}*${restore} all done."
}

# Function: stop
# Purpose:  unload iptables firewall rules
# Input:    **None**
# Output:   Prints in ``stdout`` the status of firewall unload
# Return:   *true*, unless any error occurs

stop ()
{
	echo -e " ${bold}*${restore} Stoping firewall . . . "

	# Flush all rules

	ebegin "Flushing IPv4 firewall rules"
	$ipt -Z &> /dev/null && \
	$ipt -F &> /dev/null && \
	$ipt -X &> /dev/null
	eend $?

	ebegin "Flushing IPv6 firewall rules"
	$ipt6 -Z &> /dev/null && \
	$ipt6 -F &> /dev/null
	$ipt6 -X &> /dev/null
	eend $?

	# Accept ALL

	ebegin "Setting default IPv4 firewall rules"
	$ipt -P INPUT ACCEPT &> /dev/null && \
	$ipt -P OUTPUT ACCEPT &> /dev/null
	eend $?

	ebegin "Setting default IPv6 firewall rules"
	$ipt6 -P INPUT ACCEPT &> /dev/null && \
	$ipt6 -P OUTPUT ACCEPT &> /dev/null
	eend $?

	# Test if is neccesary module unload

	if $load_modules; then

		# Module unloading

		echo -e "   ${green}*${restore} Unloading kernel modules . . . "

		# Unload module for log IPv6

		if [ ! -z "$banned_ipv6_networks" ] || \
		   [ ! -z "$banned_ipv6_ips" ] || \
		   [ ! -z "$ssh" ]; then
			$mpr -r -q -s ip6t_LOG && echo        "     ip6t_LOG"
		fi

		# IPv6 modules unloading

		$mpr -r -q -s nf_conntrack_ipv6 && echo "     nf_conntrack_ipv6"
		$mpr -r -q -s nf_defrag_ipv6 && echo    "     nf_defrag_ipv6"
		$mpr -r -q -s ip6table_filter && echo   "     ip6table_filter"
		$mpr -r -q -s ip6_tables && echo        "     ip6_tables"

		# Unload module for log

		if [ ! -z "$banned_networks" ] || \
		   [ ! -z "$banned_ips" ] || \
		   [ ! -z "$ssh" ]; then
			$mpr -r -q -s ipt_LOG && echo         "     ipt_LOG"
		fi

		# Unload module for close ICMP responses

		$icmp_close && \
			$mpr -r -q -s xt_limit && echo        "     xt_limit"

		# Unload module for ssh special processing

		if [ ! -z "$ssh" ]; then
			$mpr -r -q -s ipt_recent && echo      "     ipt_recent"
		fi

		# Unload module for manage ports

		if [ ! -z "$tcp_ports" ] || [ ! -z "$udp_ports" ] || [ ! -z "$ssh" ]; then
			$mpr -r -q -s xt_tcpudp && echo       "     xt_tcpudp"
		fi

		# IPv4 modules unloading

		$mpr -r -q -s nf_conntrack_ipv4 && echo "     nf_conntrack_ipv4"
		$mpr -r -q -s nf_defrag_ipv4 && echo    "     nf_defrag_ipv4"
		$mpr -r -q -s xt_state && echo          "     xt_state"
		$mpr -r -q -s nf_conntrack && echo      "     nf_conntrack"
		$mpr -r -q -s iptable_filter && echo    "     iptable_filter"
		$mpr -r -q -s ip_tables && echo         "     ip_tables"
		$mpr -r -q -s x_tables && echo          "     x_tables"

	fi

	echo -e " ${bold}*${restore} all done."
}

# Function: status
# Purpose:  show iptables status
# Input:    **None**
# Output:   Prints in ``stdout`` the status of iptables
# Return:   *true*, unless any error occurs

status ()
{

	# List iptables status

	$ipt -L -v -n --line-numbers

	if [ ! -z "$tcp6_ports" ] || [ ! -z "$udp6_ports" ]; then
		$ipt6 -L -v -n --line-numbers
	fi
}

# --------------
# Startup Script
# --------------

case "$1" in
	start)
		start
		RETVAL=$?
		;;
	stop)
		stop
		RETVAL=$?
		;;
	restart)

		# Stop all

		stop

		# Wait one second

		sleep 1

		# Start all

		start
		RETVAL=$?
		;;
	status)
		status
		RETVAL=$?
		;;
	*)
		echo $"Usage: $0 {start|stop|restart|status}"
		exit 1
		;;
esac

exit $RETVAL

# vim:ft=sh:fenc=utf-8:ts=2
